{"version":3,"sources":["components/Instruction.js","components/Setting.js","components/GameBoard.js","components/History.js","utils/checkWinner.js","App.js","reportWebVitals.js","index.js"],"names":["Instruction","className","style","textIndent","Setting","boardSize","handleGameStart","gameStart","handleGameReset","replaying","useState","size","setSize","win","setWin","input","useRef","consecutive","type","min","value","ref","node","onChange","disabled","max","onClick","Row","col","rowId","table","Array","fill","map","_","index","row","uuidv4","GameBoard","handleCellClick","List","historyObj","currentTurnId","turnId","turn","color","slice","Replay","History","history","handleRewind","setReplaying","histories","Object","keys","speed","i","setTimeout","length","handleReplay","historyId","whoIsWinner","consecutiveWin","rule","start","end","allSame","startX","startY","curX","curY","endX","Info","winner","toUpperCase","App","setGameStart","setBoardSize","setTurn","setTable","setHistory","latestTurnId","setLatestTurnId","setTurnId","square","setSqaure","setWinner","gameOver","setGameOver","consecutiveWins","setConsecutiveWins","useEffect","startingTable","n","copyTable","cloneDeep","copyHistory","id","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAYeA,EAVK,WACnB,OACC,sBAAKC,UAAU,qBAAf,UACC,4CAAkB,uBAClB,sBAAKC,MAAO,CAAEC,WAAY,IAA1B,4CAA+D,qCAA/D,qCACA,qCADA,8CC8BYC,EAjCC,SAAC,GAEV,IADNC,EACK,EADLA,UAAWC,EACN,EADMA,gBAAiBC,EACvB,EADuBA,UAAWC,EAClC,EADkCA,gBAAiBC,EACnD,EADmDA,UACnD,EAEmBC,mBAASL,GAF5B,mBAEEM,EAFF,KAEQC,EAFR,OAGiBF,mBAASL,GAH1B,mBAGEQ,EAHF,KAGOC,EAHP,KAIDC,EAAQC,mBACRC,EAAcD,mBAQlB,OACC,sBAAKf,UAAU,UAAf,UACC,2CAAkB,IAClB,uBAAOiB,KAAK,SAASC,IAAK,EAAGC,MAAOT,EACnCU,IAAK,SAAAC,GAAI,OAAIP,EAAQO,GAAMC,SAVL,WACxBX,EAAQG,EAAMK,OACdN,EAAO,GACHD,GAAOE,EAAMK,OAAON,GAAQC,EAAMK,QAQpCI,SAAUjB,IACR,uBACH,qDAA4B,IAC5B,uBAAOW,KAAK,SAASC,IAAK,EAAGM,IAAKd,EAAMS,MAAOP,EAC9CQ,IAAK,SAAAC,GAAI,OAAIL,EAAcK,GAAMC,SAAU,kBAAMT,GAAQG,EAAYG,QACrEI,SAAUjB,IACT,uBACF,wBAAQN,UAAU,YAAYyB,QAAS,kBAAMpB,GAAiBS,EAAMK,OAAQH,EAAYG,QAAQI,SAAUjB,EAA1G,mBACA,wBAAQN,UAAU,YAAYyB,QAASlB,EAAiBgB,SAAUf,EAAlE,uBC5BGkB,EAAM,SAAC,GAEN,IADNC,EACK,EADLA,IAAKC,EACA,EADAA,MAAOH,EACP,EADOA,QAASI,EAChB,EADgBA,MAGrB,OACC,cAAC,WAAD,UACC,6BAEEC,OAAOH,GAAKI,KAAK,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OAC1B,oBAAmBlC,UAAU,OAAOmC,IAAKP,EAAOD,IAAKO,EACpDT,QAAS,kBAAMA,EAAQG,EAAOM,IAD/B,SAEGL,GAASA,EAAMD,GAAOM,IAFhBE,uBA+BAC,EArBG,SAAC,GAEZ,IADNjC,EACK,EADLA,UAAWkC,EACN,EADMA,gBAAiBT,EACvB,EADuBA,MAG5B,OACC,qBAAK7B,UAAU,aAAf,SACC,gCACC,gCAEC8B,OAAO1B,GAAW2B,KAAK,MAAMC,KAAI,SAACC,EAAGC,GAAJ,OAChC,cAAC,EAAD,CAAoBP,IAAKvB,EAAWwB,MAAOM,EAC1CT,QAASa,EAAiBT,MAAOA,GADxBO,yBChCVG,EAAO,SAAC,GAEP,IADNC,EACK,EADLA,WAAYf,EACP,EADOA,QAASgB,EAChB,EADgBA,cAGbC,EAA2BF,EAA3BE,OAAQC,EAAmBH,EAAnBG,KAAMR,EAAaK,EAAbL,IAAKR,EAAQa,EAARb,IAE3B,OACC,qBAAI3B,UAAU,eAAeyB,QAAS,kBAAMA,EAAQe,IACnDvC,MAAO,CAAE2C,MAAOH,IAAkBC,EAAS,MAAO,SADnD,UAGEA,EAAOG,MAAM,EAAG,GAAI,KAAMF,EAH5B,gBAGwCR,EAHxC,aAGgDR,EAHhD,SAQImB,EAAS,SAAC,GAET,IADNrB,EACK,EADLA,QAGA,OACC,8BACC,wBAAQA,QAASA,EAAjB,uBAuCYsB,EAlCC,SAAC,GAEV,IADNC,EACK,EADLA,QAASC,EACJ,EADIA,aAAsBR,EAC1B,EADkBC,OAAuBQ,EACzC,EADyCA,aAGxCC,EAAYC,OAAOC,KAAKL,GAa9B,OACC,sBAAKhD,UAAU,UAAf,UACC,wCACA,cAAC,EAAD,CAAQyB,QAAS,kBAdE,SAAC6B,GAErB,IAFgC,IAAD,WAEtBC,GACRL,GAAa,GACbM,YAAW,WACVP,EAAaD,EAAQG,EAAUI,KAC3BA,IAAMJ,EAAUM,OAAS,GAAGP,GAAa,KAC3CK,EAAID,IALCC,EAAI,EAAGA,EAAIJ,EAAUM,OAAQF,IAAM,EAAnCA,GAYeG,CAAa,QACpC,6BAEEP,EAAUnB,KAAI,SAAA2B,GAAS,OACtB,cAAC,EAAD,CAAsBnB,WAAYQ,EAAQW,GACzClC,QAASwB,EAAcR,cAAeA,GAD5BkB,YC2CFC,EA7FK,SAAC/B,EAAOgC,GAG3B,IAAKhC,EAAO,OAAO,KAKnB,IAJA,IAAMnB,EAAOmB,EAAM4B,OACbK,GAASD,EAAkBnD,EAAOA,GAAQmD,EAGvC1B,EAAM,EAAGA,EAAMzB,EAAMyB,IAC7B,IAAK,IAAIR,EAAM,EAAGA,EAAMmC,EAAO,EAAIpD,EAAMiB,IAAO,CAI/C,IAHA,IAAMoC,EAAQpC,EACRqC,EAAMD,EAAQD,EAAO,EACvBG,GAAU,EACLV,EAAIQ,EAAOR,GAAKS,IACF,OAAlBnC,EAAMM,GAAKoB,KAAaU,GAAU,GAClCpC,EAAMM,GAAKoB,KAAO1B,EAAMM,GAAK4B,KAAQE,GAAU,GAC9CA,GAHwBV,KAK9B,GAAIU,EAEH,MADqC,MAAtBpC,EAAMM,GAAK4B,GAAiB,KAAO,KAOrD,IAAK,IAAIpC,EAAM,EAAGA,EAAMjB,EAAMiB,IAC7B,IAAK,IAAIQ,EAAM,EAAGA,EAAM2B,EAAO,EAAIpD,EAAMyB,IAAO,CAI/C,IAHA,IAAM4B,EAAQ5B,EACR6B,EAAMD,EAAQD,EAAO,EACvBG,GAAU,EACLV,EAAIQ,EAAOR,GAAKS,IACF,OAAlBnC,EAAM0B,GAAG5B,KAAesC,GAAU,GAClCpC,EAAM0B,GAAG5B,KAASE,EAAMkC,GAAOpC,KAAMsC,GAAU,GAC9CA,GAHwBV,KAK9B,GAAIU,EAEH,MADqC,MAAtBpC,EAAMkC,GAAOpC,GAAe,KAAO,KAOrD,IAAK,IAAIQ,EAAM,EAAGA,EAAMzB,EAAMyB,IAC7B,IAAK,IAAIR,EAAM,EAAGA,EAAMjB,EAAMiB,IAAO,CAWpC,IAVA,IAAMuC,EAAS/B,EACTgC,EAASxC,EACXyC,EAAOjC,EACPkC,EAAO1C,EACP2C,OAAI,EAIJL,KADJK,EAAOnC,EAAM2B,EAAO,IACEpD,GAEf0D,GAAQE,GAAQA,EAAO5D,IACH,OAAtBmB,EAAMuC,GAAMC,KAAgBJ,GAAU,GACtCpC,EAAMuC,GAAMC,KAAUxC,EAAMqC,GAAQC,KAASF,GAAU,GACtDA,IACLG,IACAC,IAED,GAAIJ,EAEH,MADyC,MAA1BpC,EAAMqC,GAAQC,GAAkB,KAAO,KAUvD,IALAC,EAAOjC,EACPkC,EAAO1C,EAEPsC,KADAK,EAAOnC,GAAO2B,EAAO,IACJ,GAEVM,GAAQE,GAAQA,GAAQ,IACJ,OAAtBzC,EAAMuC,GAAMC,KAAgBJ,GAAU,GACtCpC,EAAMuC,GAAMC,KAAUxC,EAAMqC,GAAQC,KAASF,GAAU,GACtDA,IACLG,IACAC,IAED,GAAIJ,EAEH,MADyC,MAA1BpC,EAAMqC,GAAQC,GAAkB,KAAO,KAOzD,OAAO,MC9EFI,EAAO,SAAC,GAEP,IADL5B,EACI,EADJA,KAAM6B,EACF,EADEA,OAEN,OACE,sBAAKxE,UAAU,OAAf,UACE,8CAAiB2C,EAAK8B,iBAEpBD,IACY,QAAXA,EACD,8BAAM,QACN,2CAAcA,EAAOC,cAArB,kBAmHOC,MA7Gf,WAAgB,IAAD,EAEqBjE,oBAAS,GAF9B,mBAENH,EAFM,KAEKqE,EAFL,OAGqBlE,mBAAS,GAH9B,mBAGNL,EAHM,KAGKwE,EAHL,OAIWnE,mBAAS,MAJpB,mBAINkC,EAJM,KAIAkC,EAJA,OAKapE,mBAAS,MALtB,mBAKNoB,EALM,KAKCiD,EALD,OAMiBrE,mBAAS,IAN1B,mBAMNuC,EANM,KAMG+B,EANH,OAO2BtE,mBAAS,MAPpC,mBAONuE,EAPM,KAOQC,EAPR,OAQexE,mBAAS,MARxB,mBAQNiC,EARM,KAQEwC,EARF,OASezE,mBAAS,GATxB,mBASN0E,EATM,KASEC,EATF,OAUe3E,mBAAS,MAVxB,mBAUN+D,EAVM,KAUEa,EAVF,OAWmB5E,oBAAS,GAX5B,mBAWN6E,EAXM,KAWIC,EAXJ,OAYiC9E,mBAAS,GAZ1C,mBAYN+E,GAZM,KAYWC,GAZX,QAaqBhF,oBAAS,GAb9B,qBAaND,GAbM,MAaK0C,GAbL,MAuFb,OAZAwC,qBAAU,WAGR,IAAMlB,EAASZ,EAAY/B,EAAO2D,IAIlC,GAHAH,EAAUb,GAGNA,EAAQ,OAAOe,GAAY,GAC3BJ,IAAW/E,EAAYA,GAAasC,IAAWsC,GAAcK,EAAU,SAE1E,CAACxD,EAAOzB,EAAW+E,EAAQK,GAAiB9C,EAAQsC,IAGrD,sBAAKhF,UAAU,MAAf,UACE,qDACA,cAAC,EAAD,CAAaI,UAAWA,IACxB,sBAAKJ,UAAU,mBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,cAAC,EAAD,CAAUI,UAAWA,EAAWC,gBA9EhB,SAACK,EAAM8E,GAC7BZ,EAAalE,GACbiE,GAAa,GAGbc,GAAmBD,GAGnB,IAAIG,EAAgB7D,MAAMpB,GAAMqB,KAAK,MACrC4D,EAAgBA,EAAc3D,KAAI,SAAA4D,GAAC,OAAI9D,MAAMpB,GAAMqB,KAAK,SACxD+C,EAASa,IAoE+DrF,UAAWA,EAC3EC,gBAlEc,WACtBoE,GAAa,GACbG,EAAS,MACTC,EAAW,IACXG,EAAU,MACVD,EAAgB,MAChBG,EAAU,GACVC,EAAU,MACVR,EAAQ,MACRU,GAAY,GACZrC,IAAa,IAwD6B1C,UAAWA,KAE/C,cAAC,EAAD,CAAMmC,KAAMA,EAAM6B,OAAQA,EAAQW,OAAQA,IAC1C,cAAC,EAAD,CAAW/E,UAAWA,EAAWkC,gBAhDjB,SAACH,EAAKR,GAE5B,GAAKrB,GAAaoC,IAAWsC,IAAgBM,GACtB,MAAnBzD,EAAMM,GAAKR,GAAf,CAGA,IAAMI,EAAgB,OAATY,EAAgB,IAAM,IAC7BkD,EAAY5D,IAAE6D,UAAUjE,GAC9BgE,EAAU1D,GAAKR,GAAOI,EACtB+C,EAASe,GAGT,IAAME,EAAW,eAAO/C,GAClBgD,EAAK5D,cACX2D,EAAYC,GAAM,CAAErD,OAAMR,MAAKR,MAAKE,MAAOgE,EAAWnD,OAAQsD,GAC9DjB,EAAWgB,GACXd,EAAgBe,GAChBd,EAAUc,GAGVZ,GAAU,SAAAa,GAAK,OAAIA,EAAQ,KAG3BpB,GAAQ,SAAAlC,GAAI,MAAa,OAATA,EAAgB,KAAO,UAyBkCd,MAAOA,OAE5E,qBAAK7B,UAAU,kBAAf,SACE,cAAC,EAAD,CAAS2C,KAAMA,EAAMK,QAASA,EAASC,aA3D1B,SAACT,GAAgB,IAC5BX,EAAwBW,EAAxBX,MAAOc,EAAiBH,EAAjBG,KAAMD,EAAWF,EAAXE,OACrBoC,EAASjD,GAETgD,EAD0B,OAATlC,EAAgB,KAAO,MAExCuC,EAAUxC,IAsD+DA,OAAQA,EACzEQ,aAAcA,cCpHXgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6738d085.chunk.js","sourcesContent":["// Instructions is depend on board's size\n\nconst Instruction = () => {\n\treturn (\n\t\t<div className=\"instruction shadow\">\n\t\t\t<b>Instruction</b><br/>\n\t\t\t<div style={{ textIndent: 20 }}>You can set the table into any <b>size</b> you want and you can also set the \n\t\t\t<b>rule</b> (consecutive X to win) of the game.</div>\n\t\t</div>\n\t);\n}\n\nexport default Instruction;","import { useRef, useState } from 'react';\n\n// Change board's size -> { 3, 5, 7, .. }\nconst Setting = ({\n\tboardSize, handleGameStart, gameStart, handleGameReset, replaying\n}) => {\n\n\tconst [size, setSize] = useState(boardSize);\n\tconst [win, setWin] = useState(boardSize);\n\tlet input = useRef();\n\tlet consecutive = useRef();\n\n\tconst handleSizeChange = () => {\n\t\tsetSize(input.value);\n\t\tsetWin(3);\n\t\tif (win > +input.value) setWin(+input.value);\n\t}\n\n\treturn (\n\t\t<div className=\"setting\">\n\t\t\t<b>Board Size</b>{' '} \n\t\t\t<input type=\"number\" min={3} value={size} \n\t\t\t\tref={node => input = node} onChange={handleSizeChange}\n\t\t\t\tdisabled={gameStart}\n\t\t\t /><br />\n\t\t\t<b>Consecutive X to Win</b>{' '}\n\t\t\t<input type=\"number\" min={3} max={size} value={win}\n\t\t\t\tref={node => consecutive = node} onChange={() => setWin(+consecutive.value)}\n\t\t\t\tdisabled={gameStart}\n\t\t\t/><br />\n\t\t\t<button className=\"start-btn\" onClick={() => handleGameStart(+input.value, +consecutive.value)} disabled={gameStart}>Start</button>\n\t\t\t<button className=\"reset-btn\" onClick={handleGameReset} disabled={replaying}>Reset</button>\n\t\t</div>\n\t);\n}\n\nexport default Setting;","import { Fragment } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst Row = ({\n\tcol, rowId, onClick, table\n}) => {\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<tr>\n\t\t\t\t{\n\t\t\t\t\tArray(+col).fill(null).map((_, index) => (\n\t\t\t\t\t\t<td key={uuidv4()} className='cell' row={rowId} col={index}\n\t\t\t\t\t\t\tonClick={() => onClick(rowId, index)}\n\t\t\t\t\t\t>{ table && table[rowId][index] }</td>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</tr>\n\t\t</Fragment>\n\t);\n}\n\nconst GameBoard = ({\n\tboardSize, handleCellClick, table\n}) => {\n\n\treturn (\n\t\t<div className=\"game-board\">\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t{\n\t\t\t\t\tArray(+boardSize).fill(null).map((_, index) => (\n\t\t\t\t\t\t<Row key={uuidv4()} col={boardSize} rowId={index} \n\t\t\t\t\t\t\tonClick={handleCellClick} table={table}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t}\t\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nexport default GameBoard;","const List = ({\n\thistoryObj, onClick, currentTurnId\n}) => {\n\n\tconst { turnId, turn, row, col } = historyObj;\n\n\treturn (\n\t\t<li className=\"history-list\" onClick={() => onClick(historyObj)}\n\t\t\tstyle={{ color: currentTurnId === turnId ? 'red': 'black' }}\n\t\t>\n\t\t\t{turnId.slice(0, 3)}{'->'}{turn}: {`(${row}, ${col})`}\n\t\t</li>\n\t);\n}\n\nconst Replay = ({\n\tonClick\n}) => {\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={onClick}>Replay</button>\n\t\t</div>\n\t);\n}\n\nconst History = ({\n\thistory, handleRewind, turnId: currentTurnId, setReplaying\n}) => {\n\n\tconst histories = Object.keys(history);\n\n\tconst handleReplay = (speed) => {\n\t\t// speed in milli-second\n\t\tfor (let i = 0; i < histories.length; i++) {\n\t\t\tsetReplaying(true);\n\t\t\tsetTimeout(() => {\n\t\t\t\thandleRewind(history[histories[i]])\n\t\t\t\tif (i === histories.length - 1) setReplaying(false);\n\t\t\t}, i * speed);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"history\">\n\t\t\t<b>History</b>\n\t\t\t<Replay onClick={() => handleReplay(500)} />\n\t\t\t<ul>\n\t\t\t\t{\n\t\t\t\t\thistories.map(historyId => (\n\t\t\t\t\t\t<List key={historyId} historyObj={history[historyId]} \n\t\t\t\t\t\t\tonClick={handleRewind} currentTurnId={currentTurnId}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n\nexport default History;","const whoIsWinner = (table ,consecutiveWin) => {\n\t// rule -> determine consecutive amount\n\n\tif (!table) return null;\n\tconst size = table.length;\n\tconst rule = (+consecutiveWin) > size ? size : +consecutiveWin;\n\n\t// check row \n\tfor (let row = 0; row < size; row++) {\n\t\tfor (let col = 0; col + rule - 1 < size; col++) {\n\t\t\tconst start = col;\n\t\t\tconst end = start + rule - 1;\n\t\t\tlet allSame = true;\n\t\t\tfor (let i = start; i <= end; i++) {\n\t\t\t\tif (table[row][i] === null) allSame = false;\n\t\t\t\tif (table[row][i] !== table[row][start]) allSame = false;\n\t\t\t\tif (!allSame) break;\n\t\t\t}\n\t\t\tif (allSame) {\n\t\t\t\tconst winner = table[row][start] === 'X' ? 'p1' : 'p2';\n\t\t\t\treturn winner;\n\t\t\t}\t\t\n\t\t}\n\t}\n\n\t// check column\n\tfor (let col = 0; col < size; col++) {\n\t\tfor (let row = 0; row + rule - 1 < size; row++) {\n\t\t\tconst start = row;\n\t\t\tconst end = start + rule - 1;\n\t\t\tlet allSame = true;\n\t\t\tfor (let i = start; i <= end; i++) {\n\t\t\t\tif (table[i][col] === null) allSame = false;\n\t\t\t\tif (table[i][col] !== table[start][col]) allSame = false;\n\t\t\t\tif (!allSame) break;\n\t\t\t}\n\t\t\tif (allSame) {\n\t\t\t\tconst winner = table[start][col] === 'X' ? 'p1' : 'p2';\n\t\t\t\treturn winner;\n\t\t\t}\n\t\t}\n\t}\n\n\t// check diangonal\n\tfor (let row = 0; row < size; row++) {\n\t\tfor (let col = 0; col < size; col++) {\n\t\t\tconst startX = row;\n\t\t\tconst startY = col;\n\t\t\tlet curX = row;\n\t\t\tlet curY = col;\n\t\t\tlet endX;\n\n\t\t\t// check bottomRight\n\t\t\tendX = row + rule - 1;\n\t\t\tlet allSame = endX >= size ? false : true;\n\n\t\t\twhile (curX <= endX && endX < size) {\n\t\t\t\tif (table[curX][curY] === null) allSame = false;\n\t\t\t\tif (table[curX][curY] !== table[startX][startY]) allSame = false;\n\t\t\t\tif (!allSame) break;\n\t\t\t\tcurX++;\n\t\t\t\tcurY++;\n\t\t\t}\n\t\t\tif (allSame) {\n\t\t\t\tconst winner = table[startX][startY] === 'X' ? 'p1' : 'p2';\n\t\t\t\treturn winner;\n\t\t\t}\n\n\t\t\t// check upRight\n\t\t\tcurX = row;\n\t\t\tcurY = col;\n\t\t\tendX = row - (rule - 1);\n\t\t\tallSame = endX < 0 ? false : true;\n\n\t\t\twhile (curX >= endX && endX >= 0) {\n\t\t\t\tif (table[curX][curY] === null) allSame = false;\n\t\t\t\tif (table[curX][curY] !== table[startX][startY]) allSame = false;\n\t\t\t\tif (!allSame) break;\n\t\t\t\tcurX--;\n\t\t\t\tcurY++;\n\t\t\t}\n\t\t\tif (allSame) {\n\t\t\t\tconst winner = table[startX][startY] === 'X' ? 'p1' : 'p2';\n\t\t\t\treturn winner;\n\t\t\t}\n\n\t\t}\n\t}\n\n\treturn null;\n\n}\n\nexport default whoIsWinner;","import { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { v4 as uuidv4} from 'uuid';\nimport './App.css';\n\n// Components\nimport { Instruction, Setting, GameBoard, History } from './components';\n\n// Utils\nimport whoIsWinner from './utils/checkWinner';\n\nconst Info = ({\n  turn, winner\n}) => {\n  return (\n    <div className=\"info\">\n      <div>Next Turn: {turn.toUpperCase()}</div>\n      {\n        winner && \n        (winner === 'tie' ? \n        <div>{'TIE'}</div> :\n        <div>Result: {winner.toUpperCase()} won!!!</div>)\n      }\n    </div>\n  );\n}\n\nfunction App() {\n\n  const [gameStart, setGameStart] = useState(false);\n  const [boardSize, setBoardSize] = useState(3);\n  const [turn, setTurn] = useState(\"p1\"); // p1 and p2\n  const [table, setTable] = useState(null); // record the input\n  const [history, setHistory] = useState({}); // record plays -> { 0: { turn: 'p1', row: 0, col: 0 } };\n  const [latestTurnId, setLatestTurnId] = useState(null); // lateset turnId\n  const [turnId, setTurnId] = useState(null); // turnId at any moment\n  const [square, setSqaure] = useState(0);\n  const [winner, setWinner] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [consecutiveWins, setConsecutiveWins] = useState(3);\n  const [replaying, setReplaying] = useState(false); // cannot reset the game while replaying\n\n  const handleGameStart = (size, consecutiveWins) => {\n    setBoardSize(size);\n    setGameStart(true);\n\n    // set consecutiveWins\n    setConsecutiveWins(consecutiveWins);\n\n    // set starting table\n    let startingTable = Array(size).fill(null);\n    startingTable = startingTable.map(n => Array(size).fill(null));\n    setTable(startingTable);\n  }\n\n  const handleGameReset = () => {\n    setGameStart(false);\n    setTable(null);\n    setHistory({});\n    setTurnId(null);\n    setLatestTurnId(null);\n    setSqaure(0);\n    setWinner(null);\n    setTurn('p1');\n    setGameOver(false);\n    setReplaying(false);\n  }\n\n  const handleRewind = (historyObj) => {\n    const { table, turn, turnId } = historyObj;\n    setTable(table);\n    const nextTurn = turn === 'p1' ? 'p2' : 'p1';\n    setTurn(nextTurn);\n    setTurnId(turnId);\n  }\n\n  const handleCellClick = (row, col) => {\n\n    if (!gameStart || turnId !== latestTurnId || gameOver) return;\n    if (table[row][col] != null) return;\n\n    // copy table and fill the input\n    const fill = turn === \"p1\" ? 'X' : 'O';\n    const copyTable = _.cloneDeep(table);\n    copyTable[row][col] = fill;\n    setTable(copyTable);\n\n    // record history\n    const copyHistory = {...history};\n    const id = uuidv4();\n    copyHistory[id] = { turn, row, col, table: copyTable, turnId: id };\n    setHistory(copyHistory);\n    setLatestTurnId(id);\n    setTurnId(id);\n\n    // update the amount of input\n    setSqaure(state => state + 1);\n\n    // change turn\n    setTurn(turn => turn === \"p1\" ? \"p2\" : \"p1\");\n  }\n\n  useEffect(() => {\n\n    // check winner\n    const winner = whoIsWinner(table, consecutiveWins);\n    setWinner(winner);\n\n    // game over\n    if (winner) return setGameOver(true);\n    if (square === boardSize * boardSize && turnId === latestTurnId) setWinner('tie');\n\n  }, [table, boardSize, square, consecutiveWins, turnId, latestTurnId]);\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic Tic Tac Toe</h1>\n      <Instruction boardSize={boardSize} />\n      <div className=\"game-body shadow\">\n        <div className=\"game-body-left\">\n          <Setting  boardSize={boardSize} handleGameStart={handleGameStart} gameStart={gameStart}\n            handleGameReset={handleGameReset} replaying={replaying}\n          />\n          <Info turn={turn} winner={winner} square={square} />\n          <GameBoard boardSize={boardSize} handleCellClick={handleCellClick} table={table} />\n        </div>\n        <div className=\"game-body-right\">\n          <History turn={turn} history={history} handleRewind={handleRewind} turnId={turnId}\n            setReplaying={setReplaying}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}